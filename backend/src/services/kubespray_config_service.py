"""
T067: Kubespray 配置生成服務
處理 Kubespray 配置檔案的生成和管理
"""
import os
import json
import yaml
import shutil
from pathlib import Path
from typing import Dict, List, Optional, Any
import logging
from datetime import datetime

logger = logging.getLogger(__name__)


class KubesprayConfigService:
    """Kubespray 配置生成服務"""

    def __init__(self,
                 templates_dir: str = "data/kubespray_configs/templates",
                 output_dir: str = "data/kubespray_configs/generated"):
        self.templates_dir = Path(templates_dir)
        self.output_dir = Path(output_dir)

        # 確保目錄存在
        self.templates_dir.mkdir(parents=True, exist_ok=True)
        self.output_dir.mkdir(parents=True, exist_ok=True)

    def generate_inventory(self,
                          session_id: str,
                          vm_config: Dict[str, Any],
                          question_set_id: str = None) -> Dict[str, Any]:
        """生成 Kubespray inventory 配置"""
        try:
            # 建立會話專用目錄
            session_dir = self.output_dir / session_id
            session_dir.mkdir(exist_ok=True)

            # 生成 inventory.ini
            inventory_content = self._generate_inventory_ini(vm_config)
            inventory_path = session_dir / "inventory.ini"

            with open(inventory_path, 'w', encoding='utf-8') as f:
                f.write(inventory_content)

            # 生成 group_vars
            group_vars_dir = session_dir / "group_vars"
            group_vars_dir.mkdir(exist_ok=True)

            # 複製基礎模板
            await self._copy_base_templates(group_vars_dir)

            # 應用題組特定配置
            if question_set_id:
                await self._apply_question_set_overrides(group_vars_dir, question_set_id)

            # 生成主機變數
            host_vars_dir = session_dir / "host_vars"
            host_vars_dir.mkdir(exist_ok=True)
            await self._generate_host_vars(host_vars_dir, vm_config)

            logger.info(f"Kubespray 配置已生成: {session_dir}")

            return {
                "session_id": session_id,
                "config_path": str(session_dir),
                "files_generated": [
                    str(inventory_path),
                    str(group_vars_dir),
                    str(host_vars_dir)
                ],
                "generated_at": datetime.utcnow().isoformat()
            }

        except Exception as e:
            logger.error(f"生成 Kubespray 配置失敗: {e}")
            raise RuntimeError(f"生成 Kubespray 配置失敗: {str(e)}")

    def _generate_inventory_ini(self, vm_config: Dict[str, Any]) -> str:
        """生成 inventory.ini 內容"""
        inventory_lines = [
            "# Kubespray inventory file",
            "# Generated by Kubernetes Exam Simulator",
            f"# Generated at: {datetime.utcnow().isoformat()}",
            "",
            "[all]"
        ]

        # 添加所有節點
        for node in vm_config.get("nodes", []):
            node_line = f"{node['name']} ansible_host={node['ip']} ip={node['ip']}"
            if "ansible_user" in node:
                node_line += f" ansible_user={node['ansible_user']}"
            inventory_lines.append(node_line)

        inventory_lines.extend(["", "[kube_control_plane]"])

        # 添加 master 節點
        for node in vm_config.get("nodes", []):
            if node.get("role") == "master":
                inventory_lines.append(node["name"])

        inventory_lines.extend(["", "[etcd]"])

        # 添加 etcd 節點（通常是 master 節點）
        for node in vm_config.get("nodes", []):
            if node.get("role") in ["master", "etcd"]:
                inventory_lines.append(node["name"])

        inventory_lines.extend(["", "[kube_node]"])

        # 添加所有節點作為 worker
        for node in vm_config.get("nodes", []):
            inventory_lines.append(node["name"])

        inventory_lines.extend([
            "",
            "[calico_rr]",
            "",
            "[k8s_cluster:children]",
            "kube_control_plane",
            "kube_node",
            "calico_rr"
        ])

        return "\n".join(inventory_lines)

    async def _copy_base_templates(self, target_dir: Path) -> None:
        """複製基礎模板檔案"""
        base_templates = {
            "all.yml": {
                "ansible_user": "root",
                "ansible_ssh_private_key_file": "/root/.ssh/id_rsa",
                "bootstrap_os": "ubuntu",
                "upstream_dns_servers": ["8.8.8.8", "8.8.4.4"],
                "nameservers": ["8.8.8.8", "8.8.4.4"],
            },
            "k8s_cluster.yml": {
                "kube_version": "v1.29.5",
                "kube_network_plugin": "calico",
                "kube_service_addresses": "10.233.0.0/18",
                "kube_pods_subnet": "10.233.64.0/18",
                "cluster_name": "cluster.local",
                "kube_proxy_mode": "iptables",
                "enable_network_policy": True,
                "dns_mode": "coredns",
            },
            "addons.yml": {
                "helm_enabled": True,
                "metrics_server_enabled": True,
                "ingress_nginx_enabled": False,
                "cert_manager_enabled": False,
                "dashboard_enabled": False,
            }
        }

        for filename, config in base_templates.items():
            config_path = target_dir / filename
            with open(config_path, 'w', encoding='utf-8') as f:
                yaml.safe_dump(config, f, default_flow_style=False)
            logger.debug(f"基礎模板已建立: {config_path}")

    async def _apply_question_set_overrides(self, group_vars_dir: Path, question_set_id: str) -> None:
        """應用題組特定的配置覆蓋"""
        try:
            # 尋找題組特定的覆蓋檔案
            question_set_dir = Path(f"data/question_sets") / question_set_id.split('/')[-1]

            override_files = {
                "base-overwrite.yml": "k8s_cluster.yml",
                "addons-overwrite.yml": "addons.yml"
            }

            for override_file, target_file in override_files.items():
                override_path = question_set_dir / override_file

                if override_path.exists():
                    # 載入覆蓋配置
                    with open(override_path, 'r', encoding='utf-8') as f:
                        override_config = yaml.safe_load(f)

                    # 載入現有配置
                    target_path = group_vars_dir / target_file
                    if target_path.exists():
                        with open(target_path, 'r', encoding='utf-8') as f:
                            existing_config = yaml.safe_load(f)
                    else:
                        existing_config = {}

                    # 合併配置
                    merged_config = {**existing_config, **override_config}

                    # 寫回檔案
                    with open(target_path, 'w', encoding='utf-8') as f:
                        yaml.safe_dump(merged_config, f, default_flow_style=False)

                    logger.info(f"已應用題組覆蓋配置: {override_file} -> {target_file}")

            # 複製網路配置檔案
            await self._copy_network_configs(group_vars_dir, question_set_dir)

        except Exception as e:
            logger.warning(f"應用題組覆蓋配置失敗: {e}")

    async def _copy_network_configs(self, group_vars_dir: Path, question_set_dir: Path) -> None:
        """複製網路配置檔案"""
        network_dir = question_set_dir / "network"

        if network_dir.exists() and network_dir.is_dir():
            for config_file in network_dir.glob("*.yml"):
                target_path = group_vars_dir / config_file.name
                shutil.copy2(config_file, target_path)
                logger.info(f"已複製網路配置: {config_file.name}")

    async def _generate_host_vars(self, host_vars_dir: Path, vm_config: Dict[str, Any]) -> None:
        """生成主機特定變數"""
        for node in vm_config.get("nodes", []):
            node_name = node["name"]
            node_vars = {
                "ansible_host": node["ip"],
                "ip": node["ip"],
                "access_ip": node["ip"],
            }

            # 添加節點特定配置
            if "vars" in node:
                node_vars.update(node["vars"])

            node_file = host_vars_dir / f"{node_name}.yml"
            with open(node_file, 'w', encoding='utf-8') as f:
                yaml.safe_dump(node_vars, f, default_flow_style=False)

            logger.debug(f"主機變數已建立: {node_file}")

    def cleanup_session_configs(self, session_id: str) -> Dict[str, Any]:
        """清理會話配置檔案"""
        session_dir = self.output_dir / session_id

        if not session_dir.exists():
            return {
                "session_id": session_id,
                "status": "not_found",
                "message": "配置目錄不存在"
            }

        try:
            # 建立備份
            backup_dir = self.output_dir / f"{session_id}.{datetime.now().strftime('%Y%m%d_%H%M%S')}.bak"
            shutil.move(str(session_dir), str(backup_dir))

            logger.info(f"會話配置已清理並備份到: {backup_dir}")

            return {
                "session_id": session_id,
                "status": "cleaned",
                "backup_path": str(backup_dir),
                "cleaned_at": datetime.utcnow().isoformat()
            }

        except Exception as e:
            logger.error(f"清理會話配置失敗: {e}")
            raise RuntimeError(f"清理會話配置失敗: {str(e)}")

    def list_session_configs(self) -> List[Dict[str, Any]]:
        """列出所有會話配置"""
        configs = []

        for session_dir in self.output_dir.iterdir():
            if session_dir.is_dir() and not session_dir.name.endswith('.bak'):
                try:
                    config_info = {
                        "session_id": session_dir.name,
                        "path": str(session_dir),
                        "created_at": datetime.fromtimestamp(session_dir.stat().st_ctime).isoformat(),
                        "modified_at": datetime.fromtimestamp(session_dir.stat().st_mtime).isoformat(),
                    }

                    # 檢查配置檔案
                    files = list(session_dir.rglob("*.yml")) + list(session_dir.rglob("*.ini"))
                    config_info["file_count"] = len(files)
                    config_info["files"] = [str(f.relative_to(session_dir)) for f in files]

                    configs.append(config_info)

                except Exception as e:
                    logger.error(f"讀取會話配置資訊失敗 {session_dir.name}: {e}")

        return sorted(configs, key=lambda x: x["modified_at"], reverse=True)


# 全域 Kubespray 配置服務實例
kubespray_config_service = KubesprayConfigService()


def get_kubespray_config_service() -> KubesprayConfigService:
    """取得 Kubespray 配置服務依賴注入"""
    return kubespray_config_service